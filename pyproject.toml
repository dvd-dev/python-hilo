

[tool.poetry]
name = "python-hilo"
version = "2025.2.2"
description = "A Python3, async interface to the Hilo API"
readme = "README.md"
authors = ["David Vallee Delisle <me@dvd.dev>"]
maintainers = ["David Vallee Delisle <me@dvd.dev>"]
license = "MIT"
repository = "https://github.com/dvd-dev/python-hilo"
packages = [
    { include = "pyhilo" },
]
classifiers = [
    "License :: OSI Approved :: MIT License",
    "Framework :: aiohttp",
    "Topic :: Home Automation",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Programming Language :: Python :: Implementation :: CPython",
    "Programming Language :: Python :: Implementation :: PyPy",
]

[tool.poetry.dependencies]
aiohttp = ">=3.8.0"
aiofiles = ">=23.2.1"
aiosignal = ">=1.2.0"
async-timeout = ">=4.0.0"
attrs = ">=21.2.0"
backoff = ">=1.11.1"
python-dateutil = ">=2.8.2"
ruyaml = ">=0.91.0"
python = "^3.9.0"
voluptuous = ">=0.13.1"
websockets = ">=8.1,<16.0"

[tool.poetry.urls]
"Bug Tracker" = "https://github.com/dvd-dev/python-hilo/issues"
Changelog = "https://github.com/dvd-dev/python-hilo/releases"

[tool.poetry.group.dev.dependencies]
Sphinx = "^7.1.2"
aresponses = "^3.0.0"
codespell = "2.4.1"
covdefaults = "2.3.0"
mypy = "1.15.0"
asynctest = "^0.13.0"
pre-commit = "^4.0.0"
pre-commit-hooks = "5.0.0"
pylint = "3.3.4"
pytest = "^8.0.0"
pytest-asyncio = "0.25.3"
pytest-cov = "^6.0.0"
ruff = "0.9.6"
safety = "3.3.0"
types-cachetools = "^5.3.0"
yamllint = "1.35.1"
sphinx-rtd-theme = "^3.0.0"
types-pytz = "^2025.1.0"

[tool.mypy]
# Specify the target platform details in config, so your developers are
# free to run mypy on Windows, Linux, or macOS and get consistent
# results.
platform = "linux"
python_version = "3.11"

# show error messages from unrelated files
follow_imports = "normal"

# suppress errors about unsatisfied imports
ignore_missing_imports = true

# be strict
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
no_implicit_reexport = true
strict_optional = true
warn_incomplete_stub = true
warn_no_return = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = true

[tool.pylint.MASTER]
ignore = [
  "tests",
]

[tool.pylint.BASIC]
expected-line-ending-format = "LF"

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "too-few-public-methods",
  "duplicate-code",
  "format",
  "unsubscriptable-object",
]

[tool.pylint.SIMILARITIES]
ignore-imports = true

[tool.pylint.FORMAT]
max-line-length = 88

[tool.pylint.DESIGN]
max-attributes = 20

[tool.pytest.ini_options]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

[tool.ruff.lint]
ignore = [
  "ANN401", # Opinioated warning on disallowing dynamically typed expressions
  "D203", # Conflicts with other rules
  "D213", # Conflicts with other rules
  "D417", # False positives in some occasions
  "PLR2004", # Just annoying, not really useful

  # Conflicts with the Ruff formatter
  "COM812",
  "ISC001",
]
select = ["ALL"]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false
mark-parentheses = false

[tool.ruff.lint.isort]
known-first-party = ["hilo"]

[tool.ruff.lint.mccabe]
max-complexity = 25

[tool.codespell]
ignore-words-list = "hass,chambre"

[build-system]
requires = ["setuptools >= 35.0.2", "wheel >= 0.29.0", "poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"
